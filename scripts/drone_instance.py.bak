import os, sys, yaml
import rospy
from std_msgs.msg import String
from Crypto.Cipher import AES
from Crypto.Hash import HMAC, SHA256
from Crypto.Random import get_random_bytes
import time
import heapq
from smaps_implementation.msg import Packet
import json
import base64

class Device:
    
    
    def __init__(self, device_id):
        
        # initialize the project path
        self.path = "/home/barracuda/catkin_ws/src/smaps_implementation"
        self.PUF_lookup_path = os.path.join(self.path, "PUF_lookup")
        self.config_path = os.path.join(self.path, "config")
        self.bin_path = os.path.join(self.path, "bin")
        
        # get the device id
        ###################
        self.device_id = device_id
        
        # initialize drone instance
        rospy.init_node("drone_"+str(self.device_id), anonymous=True)
        
        # create a PUF_lookup directory and dictionary
        ###################
        self.PUF_table = {}
        f = open(os.path.join(self.PUF_lookup_path,"PUF_"+str(self.device_id)+".bin"), "rb")
        for i in range(10):
            challenge = f.read(16)
            response = f.read(16)
            self.PUF_table[challenge] = response
        f.close()

        # read the links yaml file
        with open(os.path.join(self.config_path, "links.yaml"), "rb") as stream:
            try:
                self.config = yaml.safe_load(stream)
            except yaml.YAMLError as exc:
                print(exc)
        
        # read the no_comm yaml file
        with open(os.path.join(self.config_path, "no_comm.yaml"), "rb") as stream:
            try:
                self.no_comm = yaml.safe_load(stream)
            except yaml.YAMLError as exc:
                print(exc)

        # initialize the links
        ###################
        self.links = self.config[self.device_id]

        # generate and store and random number for the device
        ###################
        self.random = get_random_bytes(16)

        # publisher list for links 
        ###################
        self.publisher_list = []

        # create a dictionary for the links with links as keys
        ###################
        self.pub_links_dict = {}

        # create the links
        self.create_links()
        # rospy.spin()

        # timestamp
        self.timestamp = time.time()

        # Response message
        self.auth_response = None

        # extracted response 
        self.extracted_response = None
 

    
    # create links for the neighbours
    def create_links(self):
        for link in self.links:
            if link>self.device_id:
                pub =  rospy.Publisher("s"+str(link)+"x"+str(self.device_id)+"s", Packet, queue_size=10)
                self.publisher_list.append(pub)
                self.pub_links_dict[link] = pub
                rospy.Subscriber("s"+str(link)+"x"+str(self.device_id)+"s", Packet, self.msgCb)
            else:
                pub =  rospy.Publisher("s"+str(self.device_id)+"x"+str(link)+"s", Packet, queue_size=10)
                self.publisher_list.append(pub)
                self.pub_links_dict[link] = pub
                rospy.Subscriber("s"+str(self.device_id)+"x"+str(link)+"s", Packet, self.msgCb)
    
    # send message to neighbouring link
    def send_message(self,link,message:Packet):
        if link not in self.links:
            print("Link not found")
            return False
        else:
            self.pub_links_dict[link].publish(message)
            return True
    
    # encrypt the string
    def encrypt(self,message,key):

        data = message.encode()
        aes_key = key
        hmac_key = key

        cipher = AES.new(aes_key, AES.MODE_CTR)
        ciphertext = cipher.encrypt(data)

        hmac = HMAC.new(hmac_key, digestmod=SHA256)
        tag = hmac.update(cipher.nonce + ciphertext).digest()

        return tag,cipher.nonce,ciphertext
    
    # decrypt the string
    def decrypt(self,tag,nonce,ciphertext,key):

        aes_key = key
        hmac_key = key

        try:
            hmac = HMAC.new(hmac_key, digestmod=SHA256)
            tag = hmac.update(nonce + ciphertext).verify(tag)
        except ValueError:
            print("The message was modified!")
            sys.exit(1)

        cipher = AES.new(aes_key, AES.MODE_CTR, nonce=nonce)
        message = cipher.decrypt(ciphertext)
        return message.decode()
    
    # PUF function of device
    def PUF(self,challenge):
        if challenge in self.PUF_table:
            return self.PUF_table[challenge]
        else:
            return None
        
    # Authenticate base_function
    def bs_authentication(self,message):
        # message is the aggregate message of all node auth messages in the path
        message = json.loads(message)
        node_auth_message = message[str(self.device_id)]
        challenge = base64.b64decode(node_auth_message["challenge"])
        response_enc = node_auth_message["response_enc"]
        tag = base64.b64decode(response_enc[0])
        nonce = base64.b64decode(response_enc[1])
        cipher_text = base64.b64decode(response_enc[2])
        response = self.PUF(challenge)
        response_extracted = base64.b64decode(self.decrypt(tag,nonce,cipher_text,response))
        if response_extracted == response:
            print(self.device_id,":PUF response verified")
            self.extracted_response = response_extracted
            return True
        else:
            print(self.device_id,":PUF response not verified, source not base station")
            return False

    # Response generation
    def response_gen(self):
        response = self.extracted_response
        tag,nonce,ciphertext = self.encrypt(base64.b64encode(response).decode(),response)
        response_enc = [base64.b64encode(tag).decode(),base64.b64encode(nonce).decode(),base64.b64encode(ciphertext).decode()]
        message = {}
        message[str(self.device_id)] = response_enc
        self.auth_response = message


    # Message Handling for each node (heart of the protocol)
    def msgCb(self,msg:Packet):
        if msg.source == self.device_id:
            return
        else:
            # check if device id is in no_comm list
            if self.device_id in self.no_comm:
                if self.device_id in self.no_comm:
                    print("No communication allowed between ",self.device_id," and ",msg.source)
                    return
            
            print("##############################################################")
            
            # AUTH message handling, non leaf node case 
            print(self.device_id,":Received :", msg,"from ",msg.source)
            if msg.type == "AUTH" and msg.destination == self.device_id and self.device_id is not msg.message_queue[-1]:
                print(self.device_id,":AUTH message received, fowarding to next link")
                
                # Base station authentication
                if self.bs_authentication(msg.data) == True:
                    print("Base station authentication successful")
                else : 
                    rospy.logerr("BS Authentication failed, exiting")
                    return 

                # generate self.auth_response for the authentication message
                self.response_gen()

                # prepare message to send
                msg_new = Packet()
                msg_new.source = self.device_id
                msg_new.type = "AUTH"
                msg_new.current = msg.current + 1
                msg_new.destination = msg.message_queue[msg_new.current+1]
                # Response creation and auth forwarding      
                msg_new.data = msg.data
                msg_new.message_queue = msg.message_queue
                print(self.device_id,":Sending message: ", msg_new)

                # send the message
                self.send_message(msg_new.destination,msg_new)

            
            # AUTH message handling leaf node case
            elif msg.type == "AUTH" and msg.destination == self.device_id and self.device_id == msg.message_queue[-1]:
                print(self.device_id,":AUTH message received, leaf node")
                print(self.device_id,": ",msg.source," said ", msg.data,"creating a response and sending it back")

                # Base station authentication
                if self.bs_authentication(msg.data) == True:
                    print("Base station authentication successful")
                else : 
                    rospy.logerr("BS Authentication failed, exiting")
                    return 

                # generate self.auth_response for the authentication message
                self.response_gen()
                
                msg_new = Packet()
                msg_new.source = self.device_id
                msg_new.type = "RESPONSE"
                msg_new.message_queue = msg.message_queue[::-1]
                msg_new.current = 0
                msg_new.destination = msg_new.message_queue[msg_new.current+1]

                # Put response here
                msg_new.data = json.dumps(self.auth_response)
                
                print(self.device_id,":Sending message : ", msg_new," to ",msg_new.destination)
                self.send_message(msg_new.destination,msg_new)


            # RESPONSE message handling, non leaf node case
            elif msg.type == "RESPONSE" and msg.destination == self.device_id and self.device_id is not msg.message_queue[-1]:
                print(self.device_id,":RESPONSE message received")
                print(self.device_id,": ",msg.source," said ", msg.data)
                msg.current += 1
                msg_new = Packet()
                msg_new.source = self.device_id
                msg_new.type = "RESPONSE"
                msg_new.current = msg.current
                msg_new.destination = msg.message_queue[msg_new.current+1]
                
                # Response appending and forwarding
                child_response = json.loads(msg.data)
                child_response[str(self.device_id)] = self.auth_response[str(self.device_id)]
                msg_new.data = json.dumps(child_response)
                
                msg_new.message_queue = msg.message_queue
                print(self.device_id,":Sending message : ", msg_new," to ",msg_new.destination)
                self.send_message(msg_new.destination,msg_new)
            
            # Unwanted AUTH message cases
            elif msg.type == "AUTH" and msg.destination is not self.device_id:
                print(self.device_id,":AUTH message received, not for me")
                return
            
            # RESPONSE message handling leaf node case
            elif msg.type == "RESPONSE" and msg.destination == self.device_id and self.device_id == msg.message_queue[-1]:
                print(self.device_id,":RESPONSE message received, leaf node, not required")

            # Unwanted RESPONSE message case
            elif msg.type == "RESPONSE" and msg.destination is not self.device_id:
                print(self.device_id,":RESPONSE message received, not for me")
                return

    
    def get_device_id(self):
        # print(self.device_id)
        return self.device_id
    
    def get_PUF_table(self):
        # print(self.PUF_table)
        return self.PUF_table
    
    def get_links(self):
        # print(self.links)
        return self.links
        # print(self.config)
    
    def get_random(self):
        return self.random
    
    def update_random(self):
        self.random = get_random_bytes(16)

    def get_config(self):    
        return self.config 
    
    



if __name__ == "__main__":
    
    
    args = rospy.myargv(argv=sys.argv)
    drone = Device(int(args[1]))
    rospy.spin()


    

    


        

